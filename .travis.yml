sudo: false

language: android

dist: trusty

env:
  global:
  - ANDROID_API_LEVEL=26
  - ANDROID_BUILD_TOOLS_VERSION=26.0.1
  - ANDROID_EMU_API_LEVEL=22
  - ANDROID_ABI=armeabi-v7a

android:
  components:
    # Uncomment the lines below if you want to
    # use the latest revision of Android SDK Tools
    # - tools
    # - platform-tools

    # The BuildTools version used by your project
    - build-tools-$ANDROID_BUILD_TOOLS_VERSION

    # The SDK version used to compile your project
    - android-$ANDROID_API_LEVEL
    - android-28

    # Additional components
    - extra-google-google_play_services
    - extra-google-m2repository
    - extra-android-m2repository
  licenses:
    - 'android-sdk-preview-license-52d11cd2'
    - 'android-sdk-license-.+'
    - 'google-gdk-license-.+'
    
    # Specify at least one system image,
    # if you need to run emulator(s) during your tests
    - sys-img-$ANDROID_ABI-google_apis-$ANDROID_EMU_API_LEVEL

before_script:
  - echo no | android create avd --force -n test -t android-28 --abi google_apis/$ANDROID_ABI
  - emulator -avd test -no-audio -no-window &
  - android-wait-for-emulator
  - adb shell input keyevent 82 &

before_install:
  - chmod +x build.sh

before_cache:
  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock
  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/

cache:
  directories:
    - $HOME/.gradle/caches/
    - $HOME/.gradle/wrapper/
    - $HOME/.android/build-cache
deploy:
  api_key: __GITHUB_TOKEN__
  file: app/build/outputs/apk/app-release.apk
  provider: releases
  skip_cleanup: true
on:
    repo: [REPOSITORY NAME] 
    tags: true
env:
  global:
    - NDK_VERSION=r11c
  matrix:
    - ANDROID_TARGET=android-22 ANDROID_ABI=armeabi-v7a GITHUB_TOKEN=__GITHUB_TOKEN__

# 빌드에 사용할 스크립트입니다.
script:
    - ./build.sh

after_success:
    # Branch Merge & Push
    # 아래 예제 스크립트는 test, build가 성공적으로 되었을때 특정브랜치에
    # merge 후 push하는 예제입니다. 
    # travis_relese Branch Merge & Push
    - ./deploy.sh "$TRAVIS_BRANCH"

